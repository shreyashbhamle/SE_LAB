"""
OTP Verification Program using SMTP to send OTP emails.
"""

import smtplib
import random
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart


def generate_otp():
    """
    Generate a 4-digit random OTP as a string.

    Returns:
        str: A randomly generated 4-digit OTP.
    """
    return str(random.randint(1000, 9999))


def send_email(smtp_server, port, email_address, app_password, recipient_email, otp):
    """
    Connect to the SMTP server, log in, and send an email containing the OTP.

    Args:
        smtp_server (str): SMTP server address.
        port (int): Port number for SMTP.
        email_address (str): Sender's email address.
        app_password (str): App password for SMTP authentication.
        recipient_email (str): Recipient's email address.
        otp (str): The OTP to be sent.

    Raises:
        smtplib.SMTPException: If email sending fails.
    """
    try:
        print("Connecting to SMTP server...")
        server = smtplib.SMTP(smtp_server, port)
        server.starttls()
        print("SMTP connection secured.")

        print("Logging into email account...")
        server.login(email_address, app_password)
        print("Login successful!")

        # Create a well-formatted email message
        message = MIMEMultipart()
        message["From"] = email_address
        message["To"] = recipient_email
        message["Subject"] = "OTP Verification"
        message.attach(MIMEText(f"Your OTP is: {otp}", "plain"))

        print(f"Sending email to {recipient_email}...")
        server.sendmail(email_address, recipient_email, message.as_string())
        print("Email sent successfully!")

    except smtplib.SMTPException as error:
        print(f"Failed to send email: {error}")
        raise

    finally:
        print("Closing SMTP connection...")
        server.quit()


def verify_otp(generated_otp):
    """
    Prompt the user to enter the OTP and verify it against the generated OTP.

    Args:
        generated_otp (str): The OTP generated by the program.
    """
    user_input = input("Enter Your OTP >>: ")

    if user_input == generated_otp:
        print("OTP Verified Successfully!")
    else:
        print("Invalid OTP. Please try again.")


def main():
    """
    Main function to orchestrate OTP generation, email sending, and verification.
    """
    # SMTP Configuration
    smtp_server = "smtp.gmail.com"
    port = 587

    # Load credentials securely from environment variables
    email_address = "pranavdhule04@gmail.com"
    app_password = "vvve csmg ryrs mmol"

    if not email_address or not app_password:
        print("Error: Email credentials not set in environment variables.")
        return

    try:
        print("Generating OTP...")
        otp = generate_otp()
        print(f"Generated OTP: {otp}")

        recipient_email = input("Enter the recipient's email: ")

        send_email(smtp_server, port, email_address, app_password, recipient_email, otp)

        verify_otp(otp)

    except Exception as error:
        print(f"An error occurred: {error}")


if _name_ == "_main_":
    main()